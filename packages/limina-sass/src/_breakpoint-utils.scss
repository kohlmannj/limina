@import '../../../node_modules/sassdash/_index.scss';

@function limina-map-to-str($map, $a: null, $b: null) {
  @if type-of($map) == map {
    @return '(' + _($map, _pairs, _reduce _str-concat, _join ': ') + ')';
  }

  @return $map;
}

@function limina-get-media-query-list($breakpoint) {
  @if $breakpoint == null {
    @return null;
  }

  @if type-of($breakpoint) == map {
    @return limina-map-to-str($breakpoint);
  }

  @if type-of($breakpoint) == list {
    @return _($breakpoint, _map limina-map-to-str, _join ' ');
  }
}

@function limina-invert-breakpoint($breakpoint) {
  $inverted-breakpoint: ();

  @each $prop, $value in $breakpoint {
    @if $prop == min-width {
      $inverted-breakpoint: map-merge(
        $inverted-breakpoint,
        (
          max-width: $value - 1,
        )
      );
    } @else if $prop == max-width {
      $inverted-breakpoint: map-merge(
        $inverted-breakpoint,
        (
          min-width: $value + 1,
        )
      );
    }
  }

  @return $inverted-breakpoint;
}

// @function limina-create-interpolated-breakpoint-map($left, $right) {}

@mixin limina-render-breakpoint($breakpoint) {
  $breakpoint-string: null;

  @if type-of($breakpoint) == string {
    $breakpoint-string: $breakpoint;
  } @else if type-of($breakpoint) == list or type-of($breakpoint) == map {
    $breakpoint-string: limina-get-media-query-list($breakpoint);
  } @else if $breakpoint != null {
    @error '$breakpoint is an unsupported type (' + type-of($breakpoint) + ')';
  }

  @if $breakpoint-string == null {
    @content;
  } @else {
    @media #{$breakpoint-string} {
      @content;
    }
  }
}
